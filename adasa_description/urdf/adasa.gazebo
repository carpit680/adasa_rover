<?xml version="1.0" ?>
<robot name="adasa" xmlns:xacro="http://www.ros.org/wiki/xacro" >

<xacro:property name="body_color" value="Gazebo/Silver" />
<xacro:property name="red" value="Gazebo/Red" />
<xacro:property name="grey" value="Gazebo/Grey" />
<xacro:property name="yellow" value="Gazebo/Yellow" />
<xacro:property name="blue" value="Gazebo/Blue" />

<gazebo>
  <plugin name="control" filename="libgazebo_ros_control.so"/>
</gazebo>
<gazebo reference="base_link">
  <material>${red}</material>
  <mu1>0.0</mu1>
  <mu2>0.0</mu2>
  <selfCollide>true</selfCollide>
  <gravity>true</gravity>
</gazebo>

<gazebo reference="right_wheel_1">
  <material>${grey}</material>
  <mu1>0.5</mu1>
  <mu2>0.5</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="left_wheel_1">
  <material>${grey}</material>
  <mu1>0.5</mu1>
  <mu2>0.5</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="sonar_left_1">
  <material>${yellow}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="sonar_right_1">
  <material>${yellow}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="sonar_back_1">
  <material>${yellow}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="zed2_1">
  <material>${blue}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="omniwheel_1">
  <material>${grey}</material>
  <mu1>0.0</mu1>
  <mu2>0.0</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo>
  <plugin name="control" filename="libgazebo_ros_control.so"/>
</gazebo>

<!--Gazebo Differential Drive Plugin-->
<gazebo>
  <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
    <always_on>true</always_on>
    <legacy_mode>false</legacy_mode>
    <update_rate>100</update_rate>
    <ros_debug_level>na</ros_debug_level>
    <left_joint>right_wheel_joint</left_joint>
    <right_joint>left_wheel_joint</right_joint>
    <wheel_separation>0.37526</wheel_separation>
    <wheel_diameter>0.533019</wheel_diameter>
    <robot_base_frame>robot_footprint</robot_base_frame>
    <wheel_acceleration>1.0</wheel_acceleration>
    <wheel_torque>20</wheel_torque>
    <command_topic>cmd_vel</command_topic>
    <odometry_source>1</odometry_source>
    <odometry_topic>odom</odometry_topic>
    <odometry_frame>odom</odometry_frame>
    <publish_tf>1</publish_tf>
    <publish_odom>true</publish_odom>
    <publish_odomTF>true</publish_odomTF>
    <publish_wheel_joint_state>false</publish_wheel_joint_state>
    <publish_wheel_TF>false</publish_wheel_TF>
  </plugin>
</gazebo>

<gazebo reference="zed2_imu">
  <sensor name="imu_sensor" type="imu">
   <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
      <ros>
        <!-- <namespace>/demo</namespace> -->
        <remapping>~/out:=imu</remapping>
      </ros>
      <initial_orientation_as_reference>true</initial_orientation_as_reference>
    </plugin>
    <always_on>true</always_on>
    <update_rate>100</update_rate>
    <visualize>true</visualize>
    <imu>
      <angular_velocity>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </z>
      </angular_velocity>
      <linear_acceleration>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </z>
      </linear_acceleration>
    </imu>
  </sensor>
</gazebo>

<gazebo reference="zed2_1">
  <sensor name="depth_camera" type="depth">
    <visualize>true</visualize>
    <update_rate>30.0</update_rate>
    <camera name="camera">
      <horizontal_fov>1.047198</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.05</near>
        <far>3</far>
      </clip>
    </camera>
    <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
      <baseline>0.2</baseline>
      <alwaysOn>true</alwaysOn>
      <updateRate>0.0</updateRate>
      <frame_name>zed2_depth_frame</frame_name>
      <pointCloudCutoff>0.5</pointCloudCutoff>
      <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
      <distortionK1>0</distortionK1>
      <distortionK2>0</distortionK2>
      <distortionK3>0</distortionK3>
      <distortionT1>0</distortionT1>
      <distortionT2>0</distortionT2>
      <CxPrime>0</CxPrime>
      <Cx>0</Cx>
      <Cy>0</Cy>
      <focalLength>0</focalLength>
      <hackBaseline>0</hackBaseline>
    </plugin>
  </sensor>
</gazebo>

</robot>

